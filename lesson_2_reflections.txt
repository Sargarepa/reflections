1. What happens when you initialize a repository? Why do you need to do it?

A hidden .git file is added to the directory. This file is used to keep track of all the commits made to the file(s).

2. How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is used to add only the files from the working directory which will have changes made in the current commit. This is useful because you can separate the commited files logically from the entire working directory.

3. How can you use the staging area to make sure you have one commit per logical change?

By only adding files from the repository which are part of the same logical change to the staging area, we make sure not to commit changes to any other files.

4. What are some situations when branches would be helpful in keeping your history organized?

Branches are helpful when adding an experimental feature which might not end up in the final application, while still updating and fixing the original branch. Also branches can be used to make multiple similar versions of the application but still different (different language, difficulty level etc.). 

5. How do the diagrams help you visualize the branch structure?

It helps by showing the parent of each commit as well as which commit is reachable from which branch and if it is reachable at all.

6. What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The result is a single branch with the combined commits of the two branches merged. It is represented in such a way to show that the new merged commit is parent to all the commits in both branches and all the commits that happened before the branching.

7. What are the pros and cons of Git's automatic merging vs. always doing merges manually?

The pros of automatic merging is the speed and efficiency, but manually merging gives the developer more control on how the merge is done.